git init
-inicia un proyecto o el repositorio

git add nombrearchivo
-agrega el archivo, si cambio el nombre de archivo por . agrega todos los archivos que cambiaron.

git commit -m "comentar el cambio"
-guarda el cambio.

git status
- estado del proyecto.

git show
-el historial de los cambios.

git log nombre_archivo
-solo muestra el historico de cambios de ese archivo.

git, Instalar git, desde 
============================
comandos linux

cd /
-me lleva a la raiz del disco duro

ls
-lista los archivos y directorios del lugar donde estoy

ls -al
- lista todos los archivos inclusive los ocultos
- sin la l no muestra los ocultos

clear o crt+l
- limpia la pantalla

cd /c
-me lleva a ese directorio o carpeta.

cd ..
- me lleva al directorio anterior

mkdir nombre_carpeta
- para crear una carpeta

touch nombre_archivo.txt
- para crear un archivo vacio

cat nombre_archivo
- para ver el contenido del archivo.

log
- muestra el historial de los comandos ejecutados
- para ejecutar uno de la lista !#, 

rm nombre_archivo
- borra el archivo.

git init
- arrancar el repositorio, crea la carpeta .init dentro del directorio que se va a trabajar.

https://www.notion.so/S-per-poderes-en-Git-d4cda44a823c4c2984ead9d2af84b598
- comandos

git config --list
- lista la configuración inicial del git

git config --global user.name "nombre de usuario"
git config --global user.email "email del usuario"
- Para hacer la configuración inicial del usuario que hara los commits.

git show nombre_archivo
- muestra el historial de todo el archivo, los cambios realizados etc.

cuando se habre el editor de texto,
se adiciona el texto
 escape + i
 - adicionar el texto
 escape+shift+zz
 - guarda el cambio. y se sale 

 git diff la del historial que presento con el comando log
 - la primera el asume que el la mas reciente y la segunda contra la que quiero hacer la comparación

git reset --soft
- el doft es mas suave, deja lo que no haya hecho commit
- el --hard, sebuelve exactamente e al versión que seleccione.
- pemite volver auna versión anterior, obteniendo el id de esa versión con el comando log

git log --stat
- puedo ver todos los cambios del proyecto y me indica cuales fueron los especificos en cada archivo modificado.

git checkout id_del commit, que se muestra con el de log
git checkout id nombre_archivo
- con esto se retorna a esa versión. OJO de mucho cuidado.
- luego de esto se hacen los cambio y nuevamente se hace el commit nuevo

git show
- muestra los últimos cambios que hice.

git branch nombre_rama
- crea una rama a partir de donde me encuetro

git checkout nombre_rama
- para cambiar entre ramas

git commit -am
- hacer el add y el commit al mismo tiempo siempre y cuando ya se haya hecho el add. con anterioridad

git merge
git merge nombre_rama a fusionar con la master.
- ubicarse en la rama sobre la cual se hará la fusión, normalmente en master.

conflictos
- al fusionar las ramas, y dos personas hacen cambio en el mismo punto.
- se abre el archivo y se decide cual se debe dejar.
- al final se debe hacer el commit -am para guardar el nuevo cambio y confirmar que parte se deja.
- con visualStudio tiene una herramienta que de una vez le permite decidir cual dejar.

GitHub
user: andrescowboy
correo: andresbaquer1@gmail.com
Caba2806*
- 
crearlo
 
git remote add origin master la dirección del repositorio remoto
git remote add origin https://github.com/andrescowboy/cursoGit.git
- agrega el directorio remoto.

git remote
- muestra el nuevo  origen

git remote -v
muestra el origin para descargar y subir

git push origin master
- sube los cambios al repositorio remoto
- si es la primera vez va a pedir las credenciales de ese repositorio

git pull origin master
- descarga todo lo que se encuentra en el repositorio remoto al local

git  pull origin master --allow-unrelated-histories
- para fusionar los cambios del remoto y el local, esto sucede normalmente cada vez que se inicia un repositorio remoto.







